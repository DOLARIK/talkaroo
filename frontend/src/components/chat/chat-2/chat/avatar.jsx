/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";
import React, { use, useEffect, useMemo, useRef, useState } from "react";

import * as THREE from "three";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
  Y: "viseme_kk",
  Z: "viseme_I",
  W: "viseme_AA",
  V: "viseme_O",
  U: "viseme_U",
};


export function Avatar({isTalking, ...props}) {

  const { nodes, materials } = useGLTF("/models/avatar-blonde.glb");


  const {animations: idleAnimation} = useFBX("/animations/Idle.fbx")
const {animations: greetingAnimation} = useFBX("/animations/Standing Greeting.fbx")
const {animations: talkingAnimation} = useFBX("/animations/Talking.fbx")


idleAnimation[0].name = "idle"
greetingAnimation[0].name = "greeting"
talkingAnimation[0].name = "talking"



const [animation, setAnimation] = useState(isTalking ? "talking" : "idle")

const group = useRef();

const {actions} = useAnimations([idleAnimation[0], greetingAnimation[0], talkingAnimation[0]], group)

const jsonFile = useLoader(THREE.FileLoader, "/animations/mouth.json");
const lipSync = JSON.parse(jsonFile)

let i = 0;
// if istalking is true, switch between viseme P and aa
useEffect(() => {
  if (isTalking) {
    // switch between viseme P and AA
    
    const interval = setInterval(() => {
      if (!isTalking) {
        clearInterval(interval);
        return;
      }
      if (i % 2 === 0) {
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["viseme_PP"]] = 0.5
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["viseme_aa"]] = 0
      } else {
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["viseme_PP"]] = 0
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["viseme_aa"]] = .5
      }
      i++;
    }
    , 200);
    return () => clearInterval(interval);
  }
}, [isTalking, actions, lipSync, i, animation, nodes.Wolf3D_Head.morphTargetDictionary, nodes.Wolf3D_Head.morphTargetInfluences])


useEffect(() => {
  actions[animation].reset().fadeIn(0.5).play();
  return () => actions[animation].fadeOut(0.5);
}, [actions, animation ])

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
    </group>
  );
}

useGLTF.preload("/models/avatar-blonde.glb");


